/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import bancocrud_gui.Conexao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;

/**
 *
 * @author Gerry
 */
public class MenuLogado extends javax.swing.JFrame {

    /**
     * Creates new form MenuLogado
     */
    public MenuLogado() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonVisualizarSaldo = new javax.swing.JButton();
        jButtonDepositar = new javax.swing.JButton();
        jButtonSacar = new javax.swing.JButton();
        jButtonTransferencia = new javax.swing.JButton();
        jButtonDeletarConta = new javax.swing.JButton();
        jButtonLogOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonVisualizarSaldo.setText("Visualizar Saldo");
        jButtonVisualizarSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualizarSaldoActionPerformed(evt);
            }
        });

        jButtonDepositar.setText("Depositar");
        jButtonDepositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDepositarActionPerformed(evt);
            }
        });

        jButtonSacar.setText("Sacar");
        jButtonSacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSacarActionPerformed(evt);
            }
        });

        jButtonTransferencia.setText("Transferência");
        jButtonTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransferenciaActionPerformed(evt);
            }
        });

        jButtonDeletarConta.setText("Deletar Conta");
        jButtonDeletarConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletarContaActionPerformed(evt);
            }
        });

        jButtonLogOut.setText("Sair da Conta");
        jButtonLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonVisualizarSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addComponent(jButtonDepositar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSacar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonTransferencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDeletarConta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonVisualizarSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButtonDepositar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSacar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButtonTransferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDeletarConta, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jButtonLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualizarSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualizarSaldoActionPerformed
        String numero_conta = JOptionPane.showInputDialog("Digite o número da conta:");
                try (Connection conexao = Conexao.conectar()) {
                    String sql = "SELECT saldo FROM contas WHERE numero = ?";
                    try (PreparedStatement stmt = conexao.prepareStatement(sql)) {
                        stmt.setString(1, numero_conta);
                        try (ResultSet resultado = stmt.executeQuery()) {
                            if (resultado.next()) {
                                double saldo = resultado.getDouble("saldo");
                                JOptionPane.showMessageDialog(null, "Saldo disponível: R$ " + saldo);
                            } else {
                                JOptionPane.showMessageDialog(null, "Conta não encontrada.");
                            }
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + ex.getMessage());
                }

    }//GEN-LAST:event_jButtonVisualizarSaldoActionPerformed

    private void jButtonDepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDepositarActionPerformed
        String numero = JOptionPane.showInputDialog("Digite o número da conta:");
        try (Connection conexao = Conexao.conectar()) {
            String sql = "SELECT saldo FROM contas WHERE numero = ?";
            try (PreparedStatement stmt = conexao.prepareStatement(sql)) {
                stmt.setString(1, numero);
                try (ResultSet resultado = stmt.executeQuery()) {
                    if (resultado.next()) {
                        double saldoAtual = resultado.getDouble("saldo");
                        double valor = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor a ser depositado: R$"));
                        double novoSaldo = saldoAtual + valor;

                        // Atualiza o saldo no banco de dados
                        String sqlAtualizarSaldo = "UPDATE contas SET saldo = ? WHERE numero = ?";
                        try (PreparedStatement stmtAtualizarSaldo = conexao.prepareStatement(sqlAtualizarSaldo)) {
                            stmtAtualizarSaldo.setDouble(1, novoSaldo);
                            stmtAtualizarSaldo.setString(2, numero);
                            stmtAtualizarSaldo.executeUpdate();
                        }

                        JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! Novo saldo: R$ " + novoSaldo);
                    } else {
                        JOptionPane.showMessageDialog(null, "Conta não encontrada.");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
        }

    }//GEN-LAST:event_jButtonDepositarActionPerformed

    private void jButtonSacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSacarActionPerformed
        String numero = JOptionPane.showInputDialog("Digite o número da conta:");
        try (Connection conexao = Conexao.conectar()) {
            String sql = "SELECT saldo FROM contas WHERE numero = ?";
            try (PreparedStatement stmt = conexao.prepareStatement(sql)) {
                stmt.setString(1, numero);
                try (ResultSet resultado = stmt.executeQuery()) {
                    if (resultado.next()) {
                        double saldoAtual = resultado.getDouble("saldo");
                        double valor = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor a ser sacado: R$"));
                        if (valor <= saldoAtual) {
                            double novoSaldo = saldoAtual - valor;

                            // Atualiza o saldo no banco de dados
                            String sqlAtualizarSaldo = "UPDATE contas SET saldo = ? WHERE numero = ?";
                            try (PreparedStatement stmtAtualizarSaldo = conexao.prepareStatement(sqlAtualizarSaldo)) {
                                stmtAtualizarSaldo.setDouble(1, novoSaldo);
                                stmtAtualizarSaldo.setString(2, numero);
                                stmtAtualizarSaldo.executeUpdate();
                            }

                            JOptionPane.showMessageDialog(null, "Saque realizado com sucesso! Novo saldo: R$ " + novoSaldo);
                        } else {
                            JOptionPane.showMessageDialog(null, "Saldo insuficiente para o saque.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Conta não encontrada.");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
        }        

    }//GEN-LAST:event_jButtonSacarActionPerformed

    private void jButtonTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransferenciaActionPerformed
        String numeroOrigem = JOptionPane.showInputDialog("Digite o número da sua conta:");
        try (Connection conexao = Conexao.conectar()) {
            String sqlOrigem = "SELECT saldo, senha FROM contas WHERE numero = ?";
            try (PreparedStatement stmtOrigem = conexao.prepareStatement(sqlOrigem)) {
                stmtOrigem.setString(1, numeroOrigem);
                try (ResultSet resultadoOrigem = stmtOrigem.executeQuery()) {
                    if (resultadoOrigem.next()) {
                        double saldoOrigem = resultadoOrigem.getDouble("saldo");
                        String senhaArmazenada = resultadoOrigem.getString("senha");

                        JPasswordField senhaField = new JPasswordField();
                        int result = JOptionPane.showConfirmDialog(null, senhaField, "Digite a senha:", JOptionPane.OK_CANCEL_OPTION);
                        if (result == JOptionPane.OK_OPTION) {
                            String senhaDigitada = new String(senhaField.getPassword());
                            if (senhaArmazenada.equals(senhaDigitada)) {
                                String numeroDestino = JOptionPane.showInputDialog("Digite o número da conta de destino:");
                                try (PreparedStatement stmtDestino = conexao.prepareStatement(sqlOrigem)) {
                                    stmtDestino.setString(1, numeroDestino);
                                    try (ResultSet resultadoDestino = stmtDestino.executeQuery()) {
                                        if (resultadoDestino.next()) {
                                            double saldoDestino = resultadoDestino.getDouble("saldo");
                                            double valor = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor a ser transferido: R$"));
                                            if (valor <= saldoOrigem) {
                                                double novoSaldoOrigem = saldoOrigem - valor;
                                                double novoSaldoDestino = saldoDestino + valor;

                                                // Atualiza os saldos no banco de dados
                                                String sqlAtualizarSaldoOrigem = "UPDATE contas SET saldo = ? WHERE numero = ?";
                                                String sqlAtualizarSaldoDestino = "UPDATE contas SET saldo = ? WHERE numero = ?";
                                                try (PreparedStatement stmtAtualizarSaldoOrigem = conexao.prepareStatement(sqlAtualizarSaldoOrigem);
                                                     PreparedStatement stmtAtualizarSaldoDestino = conexao.prepareStatement(sqlAtualizarSaldoDestino)) {
                                                    stmtAtualizarSaldoOrigem.setDouble(1, novoSaldoOrigem);
                                                    stmtAtualizarSaldoOrigem.setString(2, numeroOrigem);
                                                    stmtAtualizarSaldoOrigem.executeUpdate();

                                                    stmtAtualizarSaldoDestino.setDouble(1, novoSaldoDestino);
                                                    stmtAtualizarSaldoDestino.setString(2, numeroDestino);
                                                    stmtAtualizarSaldoDestino.executeUpdate();
                                                }

                                                JOptionPane.showMessageDialog(null, "Transferência realizada com sucesso!");
                                                JOptionPane.showMessageDialog(null, "Novo saldo da conta de origem: R$ " + novoSaldoOrigem);
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Saldo insuficiente para a transferência.");
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Conta de destino não encontrada.");
                                        }
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Senha incorreta.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Conta de origem não encontrada.");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
        }

    }//GEN-LAST:event_jButtonTransferenciaActionPerformed

    private void jButtonDeletarContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletarContaActionPerformed
        String numero = JOptionPane.showInputDialog("Digite o número da conta que deseja deletar:");
        try (Connection conexao = Conexao.conectar()) {
            String sql = "DELETE FROM contas WHERE numero = ?";
            try (PreparedStatement stmt = conexao.prepareStatement(sql)) {
                stmt.setString(1, numero);
                int linhasAfetadas = stmt.executeUpdate();
                if (linhasAfetadas > 0) {
                    JOptionPane.showMessageDialog(null, "Conta deletada com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(null, "Conta não encontrada.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
        }

    }//GEN-LAST:event_jButtonDeletarContaActionPerformed

    private void jButtonLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogOutActionPerformed
        this.setVisible(false);
        dispose();
        JOptionPane.showMessageDialog(null, "LogOut com sucesso!");

    }//GEN-LAST:event_jButtonLogOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuLogado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuLogado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuLogado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuLogado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MenuLogado().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeletarConta;
    private javax.swing.JButton jButtonDepositar;
    private javax.swing.JButton jButtonLogOut;
    private javax.swing.JButton jButtonSacar;
    private javax.swing.JButton jButtonTransferencia;
    private javax.swing.JButton jButtonVisualizarSaldo;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
